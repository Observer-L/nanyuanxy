<style lang="less">
  @import "../components/vant/common/index.wxss";
  @import "../styles/base";
  /* SIDEBAR */
  .sidebar {
    position: absolute;
    right: @sidebarPadding;
    display: flex;
    padding: @sidebarPadding;
    flex-direction: column;
    /*border: 1px dotted #aaa;*/

    .btn {
      width: @sidebarSize;
      height: @sidebarSize;
      /*border-radius: 50%;*/

      &.btn-cats {
        transform: scale(1);
        transition: all .3s ease;
        &.active {
          transform: scale(1.1);
        }
      }

      &:not(:last-child) {
        margin-bottom: @sidebarPadding;
      }
    }
  }

  .cats {
    width: 100rpx;
    max-height: 460rpx;
    font-size: 12px;
    position: absolute;
    overflow-y: scroll;
    right: @sidebarPadding;
    margin-top: @sidebarPadding * 4 + @sidebarSize * 4;
    width: @sidebarSize + (@sidebarPadding * 2);
    background: rgba(255, 255, 255, 0.6);
    color: #fff;
    opacity: 0;
    transform: translateX(@sidebarSize + (@sidebarPadding * 3));
    text-transform: uppercase;
    transition: all .3s ease;
    border-radius: 6px;

    &.active {
      transform: translateX(0);
      opacity: 1;
    }

    .cat {
      width: 100%;
      height: @sidebarSize;
      line-height: @sidebarSize;
      text-align: center;
      transition: all .3s ease;
      color: #000;

      /* &:not(:last-child) {
        margin-bottom: @sidebarPadding / 2;
      } */

      &.selected {
        color: #fff;
        &.xun {
          background: @themeColorX;
        }

        &.you {
          background: @themeColorY;
        }
      }

      &.lost {
        color: @lostColor;
      }

      &.found {
        color: @foundColor;
      }
    }
  }

  /* FAB */
  .FAB {
    position: absolute;
    width: @FABsize;
    height: @FABsize;
    left: 50%;
    // bottom: @FABsize * 1.5;
    bottom: @FABsize;
    transform: translateX(-50%);

    .btn {
      line-height: @FABsize;
      text-align: center;
      border-radius: 50%;
    }

  }

  /*　MP PREVIEW　*/
  .mp-preview {
    position: absolute;
    display: flex;
    justify-content:center;
    padding-right:@sidebarSize + @sidebarPadding * 2;
    padding-left:@sidebarSize / 2;
    align-items:center;
    height: @sidebarSize;
    top: @sidebarPadding * 3 + @sidebarSize;
    right: @sidebarPadding * 2;
    background: @grayBg;
    border-radius: @sidebarSize;
    font-size: 14px;
    transform: translateX(50vw);
    opacity: 0;
    transition: all .6s ease;
    &.active {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* DECK */
  .deck {
    position: absolute;
    width: @FABsize * 2.5;
    height: @FABsize * 2.5;
    border-radius: 50%;
    left: 50%;
    margin-left: -(@FABsize * 1.25);
    // bottom: @FABsize * 0.75;
    bottom: @FABsize * 0.25;

    &.xun {
      width: @FABsize;
      margin-left: -(@FABsize * 0.5);
    }
  }

  .deck {
    &.active {
      .option {
        opacity: 1;

        &.top {
          transform: translate(-50%, 0);
        }

        &.right {
          transform: translate(0, -50%);
        }

        &.bottom {
          transform: translate(-50%, 0);
        }

        &.left {
          transform: translate(0, -50%);
        }
      }
    }

    .option {
      position: absolute;
      width: @FABsize / 2;
      height: @FABsize / 2;
      background: #fff;
      border-radius: 50%;
      text-align: center;
      line-height: @FABsize / 2;
      opacity: 0;
      transition: all .3s ease;

      &.top {
        left: 50%;
        top: 0;
        transform: translate(-50%, @FABsize);
      }

      &.right {
        right: 0;
        top: 50%;
        transform: translate(-@FABsize, -50%);
      }

      &.bottom {
        left: 50%;
        bottom: 0;
        transform: translate(-50%, -@FABsize);
      }

      &.left {
        left: 0;
        top: 50%;
        transform: translate(@FABsize, -50%);
      }
    }
  }

  /* LOCATION & SEARCH */
  .location, .search {
    width: @FABsize / 2;
    height: @FABsize / 2;
    position: absolute;
    // bottom: @FABsize * 1.75;
    bottom: @FABsize * 1.25;
    transform: translate(0, 0);
    transition: all .3s ease;
  }

  .location {
    left: @FABsize;
    &.route {
      transform: translate(-110rpx, 140rpx) !important;
    }

    &.offset {
      transform: translate(-@FABsize / 2, 0);
    }
  }

  .search {
    right: @FABsize;

    &.offset {
      transform: translateX(@FABsize / 2);
    }
  }

  /* ROUTES */
  .route-wrapper {
    position: relative;
    height: 20vh;
    padding: 20rpx;
    box-sizing: border-box;
    // background: @grayBg;
    overflow: hidden;
    .close {
      position: absolute;
      right: 20rpx;
      top: 20rpx;
    }
    .title {
    }
    .desc {
      font-size: 60%;
    }
    .route {
      margin-top: 20rpx;
      background: #fff;
      .points {
        height: 100rpx;
        display: flex;
        .info:not(:last-child) {
          margin-right: 40rpx;
        }
        .info {
          z-index: 1;
          width:80rpx;
          display: flex;
          flex-direction: column;
          align-items:center;
          image {
            width: 64rpx;
            height: 96rpx;
          }
          .name {
            font-size: 12px;
          }
        }
      }
    }
    .line {
      position: absolute;
      z-index: 0;
      top: 30rpx;
      height: 2px;
      background-color: @themeColorY;
      border-left: 20rpx solid #0091ff;
      border-right: 20rpx solid #CB4042;
    }
  }

  /* MESSAGES */
  .message-wrapper {
    position: absolute;
    width: 86vw;
    margin-top: @sidebarPadding;
    right: @sidebarPadding * 2;
    height: @sidebarSize;
    border-radius: @sidebarSize;
    background: rgba(0,0,0,.2);
    transition: all .3s ease;
    opacity: 0;
    transform: translateX(86vw);
    &.active {
      transform: translateX(0);
      opacity: 1;
    }
    .message {
      text-align: center;
      line-height: @sidebarSize;
      padding:0 76rpx 0 24rpx;
    }
  }

  /* ACCOUNT */
  .account {
    position: absolute;
    bottom: 80rpx;
    left: 0;
    .avatar, .btn-userInfo {
      position:absolute;
      z-index: 101;
      width:52rpx;
      height:52rpx;
      left:36rpx;
      top:12rpx;
      border-radius: 50%;
      box-shadow: 0 0 2px #aaa;
    }
    .btn-userInfo {
      /* HACK */
      border-radius: 0;
      border: none;
      background: rgba(255, 255, 255, .3);
      color: #fff;
      left:0;
      top:0;
    }
    .bg, .btn-userInfo {
      width: 100rpx;
      height: 76rpx;
    }
  }

  .btn-reset {
    width: 100rpx;
    height: 130rpx;
  }

</style>

<template>
  <view>
    <map
      id="map"
      longitude="{{mapCenter.length ? mapCenter[1] : school.location[1]}}"
      latitude="{{mapCenter.length ? mapCenter[0] : school.location[0]}}"
      scale="{{scale ? scale : originMarkers[currentCatIndex].scale}}"
      markers="{{markers}}"
      @markertap="handleMarkerTap"
      polyline="{{ currentRoute.polyline }}"
      show-location
      enable-3D
      show-compass
      enable-satellite="{{false}}"
      enable-traffic="{{false}}"
      rotate="{{mapRotate}}"
      skew="{{mapSkew}}"
      enable-overlooking="{{true}}"
      enable-rotate="{{true}}"
      style="width: 100%; height: {{routeMode ? '80vh' : '100vh' }};"
    >
      <!-- COMPASS RESET ANGLE -->
      <cover-view class="btn-reset" @tap="resetMapAngle"></cover-view>
      <!-- MESSAGES -->
      <cover-view class="message-wrapper {{showMessagesBar ? 'active' : ''}}" style="top:{{menuButtonPos}}px">
        <cover-view
          class="message van-ellipsis"
        >
          {{message}}
        </cover-view>
      </cover-view>
      <!-- SIDEBAR -->
      <cover-view class="sidebar" style="top:{{menuButtonPos}}px">
        <cover-image class="btn" @tap="showBoard" src="../images/icons/sidebar/board.png"></cover-image>
        <cover-image class="btn" @tap="handleMarkerTap" src="../images/icons/sidebar/school.png"></cover-image>
        <cover-image
          wx:if="{{config.panorama.active}}"
          class="btn"
          @tap="show360"
          src="../images/icons/sidebar/panorama.png"
        ></cover-image>
        <cover-image
          class="btn btn-cats {{showCats ? 'active' : ''}}"
          @tap="{{routeMode ? 'closeRoute' : 'toggleCats'}}"
          src="../images/icons/sidebar/cats.png"
        >cat</cover-image>
      </cover-view>
      <cover-view
        style="top:{{menuButtonPos}}px"
        class="cats {{showCats ? 'active' : ''}}"
        @tap="switchCat"
      >
        <cover-view
          wx:if="{{Ymode}}"
          wx:for="{{originMarkers}}"
          wx:key="{{index}}"
          class="cat {{currentCatIndex === index ? 'you selected' : ''}}"
          id="{{index}}"
        >
          {{item.type}}
        </cover-view>
        <cover-view
          wx:if="{{!Ymode}}"
          wx:for="{{XmarkersTypes}}"
          wx:key="{{index}}"
          id="{{index}}"
          class="cat {{Xmarkers[XmarkersTypes[index]].active ? 'xun selected' : ''}} {{item}}"
        >
          {{item}}
        </cover-view>
      </cover-view>
      <!-- FAB -->
      <cover-view class="deck {{showDeck ? 'active' : ''}} {{!Ymode ? 'xun' : ''}}" @tap="action" style="{{routeMode ? 'display:none' : ''}}">
        <block wx:if="{{Ymode}}">
          <cover-view class="option top" id="m">中</cover-view>
          <cover-view class="option right" id="e">东</cover-view>
          <cover-view class="option bottom" id="s">南</cover-view>
          <cover-view class="option left" id="e">西</cover-view>
        </block>
        <block wx:else>
          <cover-view class="option top" id="lost">Lost</cover-view>
          <cover-view class="option bottom" id="found">Found</cover-view>
        </block>
      </cover-view>
      <cover-view class="FAB"
                  @touchforcechange="switchMode"
                  @longpress="switchMode"
                  @tap="toggleDeck"
                  style="{{routeMode ? 'display:none' : ''}}"
      >
        <cover-image class="btn you" src="../images/icons/you.png" wx:if="{{Ymode}}"></cover-image>
        <cover-image class="btn xun" src="../images/icons/xun.png" wx:else></cover-image>
      </cover-view>

      <!-- SIDE BTN -->
      <cover-image
        class="location {{Ymode && showDeck ? 'offset' : ''}} {{routeMode ? 'route' : ''}}"
        @tap="locate"
        src="../images/icons/location.png"
      >
      </cover-image>
      <cover-image
        class="search {{Ymode && showDeck ? 'offset' : ''}}"
        @tap="search"
        style="{{routeMode ? 'display:none' : ''}}"
        src="../images/icons/search.png"
      ></cover-image>

      <!-- ACCOUNT -->
      <cover-view class="account" @tap="navigate" id="account" wx:if="{{!routeMode}}">
        <cover-image class="bg" src="../images/account.png"></cover-image>
        <cover-image class="avatar" src="{{userInfo.avatarUrl && isAuth ? userInfo.avatarUrl : '../images/user.png'}}"></cover-image>
        <!--    HACK    -->
        <button
          wx:if="{{!isAuth}}"
          class="btn-userInfo"
          open-type="getUserInfo"
          bindgetuserinfo="bindGetUserInfo"
        >.</button>
      </cover-view>
    </map>
    <!-- ROUTES -->
    <view class="route-wrapper">
      <view class="title">{{routes[currentRoute.id].name}}</view>
      <view class="desc">共有{{routes[currentRoute.id].count}}个景点</view>
      <scroll-view class="route" scroll-x>
        <view class="points" style="width: {{ routeWidth }} rpx">
          <block
            wx:for="{{currentRoute.polyline[0].points}}"
            wx:key="{{index}}"
            wx:if="{{item.name}}"
           >
            <view
              class="info"
              @tap="focusPoint"
              data-id="{{index}}"
            >
              <image src="{{item.iconPath}}" wx:if="{{item.iconPath}}" ></image>
              <text class="name">{{item.short_name || item.name}}</text>
            </view>
          </block>
        </view>
        <view class="line" style="width:{{routeLength * 80}}rpx"></view>
      </scroll-view>
      <view class="close" @tap="closeRoute">X</view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import config from '../config'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '南苑寻游',
      navigationStyle: 'custom',
      disableScroll: true
    }

    data = {
      mapCtx: null,
      mapCenter: [],
      mapRotate: 0,
      mapSkew: 0,
      school: config.school,
      originMarkers: [],
      markers: [],
      Xmarkers: {},
      Ymarkers: [],
      showCats: true,
      showDeck: false,
      currentCatIndex: 0,
      scale: 0,
      Ymode: true,
      music: {},
      routes: [],
      currentRoute: {
        id: 0,
        polyline: [
          {
            points: [],
            ...config.markerStyle.polylineStyle
          }
        ]
      },
      message: 'XXXXXXXXXXXXXXXX',
      timer: null,
      showMessagesBar: false,
      config: null,
      isAuth: false,
      userInfo: null
    }

    computed = {
      XmarkersTypes () {
        return Object.keys(this.Xmarkers)
      },
      routeLength() {
        if (!this.routes.length) return
        return this.routes[this.currentRoute.id].count
      },
      routeWidth () {
        if (!this.routes.length) return
        const routeLength = this.routes[this.currentRoute.id].count * 160
        const wd = wx.getSystemInfoSync().windowWidth
        return routeLength <= wd ? wd : routeLength
      },
      routeMode() {
        return !!this.currentRoute.polyline[0].points.length
      },
      menuButtonPos() {
        const menuButtonPos = wx.getMenuButtonBoundingClientRect()
        return menuButtonPos.top + menuButtonPos.height
      }
    }

    watch = {
      showDeck (newValue, oldValue) {
        this.showCats = !newValue
        this.$apply()
      }
    }

    methods = {
      handleMarkerTap(e) {
        if (e.markerId !== undefined) {
          wx.navigateTo({
            url: `./detail?id=${e.markerId}&${this.Ymode ? 'mode=you&type=' + encodeURI(this.originMarkers[this.currentCatIndex].type) : 'xun'}`
          })
        } else {
          wx.navigateTo({
            url: './detail'
          })
        }
      },
      showBoard() {
        wx.navigateTo({
          url: this.Ymode ? './board' : './items'
        })
      },
      toggleCats() {
        this.showCats = !this.showCats
      },
      switchCat(e) {
        const self = this
        const catIndex = Number(e.target.id)

        if (this.Ymode) {
          if (this.currentCatIndex !== catIndex) {
            this.currentCatIndex = catIndex
            this.markers = this.originMarkers[catIndex].data
          }
        } else {
          const Xmarkers = this.Xmarkers
          // LOST和FOUND至少激活一项
          if (catIndex === 0) {
            if (Xmarkers.lost.active) {
              this.markers = Xmarkers.found.data
              Xmarkers.lost.active = false
              Xmarkers.found.active = true
            } else {
              if (!Xmarkers.found.active) {
                this.markers = Xmarkers.lost.data
                Xmarkers.lost.active = true
              } else {
                this.markers = Xmarkers.found.data.concat(Xmarkers.lost.data)
                Xmarkers.lost.active = true
              }
            }
          } else {
            if (Xmarkers.found.active) {
              this.markers = Xmarkers.lost.data
              Xmarkers.lost.active = true
              Xmarkers.found.active = false
            } else {
              if (!Xmarkers.lost.active) {
                this.markers = Xmarkers.found.data
                Xmarkers.found.active = true
              } else {
                this.markers = Xmarkers.found.data.concat(Xmarkers.lost.data)
                Xmarkers.found.active = true
              }
            }
          }
        }
        // POP效果
        this.scale = 16
        setTimeout(() => {
          self.scale = 0
          self.$apply()
        }, 300)
        // includePoints
        this.includePoints(125)
      },
      toggleDeck() {
        this.showDeck = !this.showDeck
      },
      switchMode() {
        this.Ymode = !this.Ymode
        if (!this.Ymode) {
          this.Xmarkers.lost.active = true
          this.Xmarkers.found.active = true
          this.markers = this.Xmarkers.lost.data.concat(this.Xmarkers.found.data)
        } else {
          this.markers = this.Ymarkers
          this.currentCatIndex = 0
        }
      },
      locate() {
        // 使用MapContext而非wx.getLocation
        this.mapCtx.moveToLocation()
      },
      search() {
        wx.navigateTo({
          url: `./search?mode=${this.Ymode ? 'you' : 'xun'}`
        })
      },
      show360() {
        wx.navigateTo({
          url: './web-view?scene_id=' + config.school.panorama
        })
      },
      action(e) {
        if (!e.target.id) return
        if (this.Ymode) {
          const cr = this.currentRoute
          const routes = this.routes
          this.showMessagesBar = false
          switch (e.target.id) {
            case 'm':
              cr.id = 0
              cr.polyline[0].points = routes[0].data
              this.markers = cr.polyline[0].points.filter(p => p.name)
              break
            default:
              console.log('none')
          }
        } else {
          wx.navigateTo({
            url: './report?type=' + e.target.id
          })
        }
      },
      closeRoute() {
        this.showDeck = false
        this.currentRoute.polyline[0].points = []
        this.markers = this.originMarkers[this.currentCatIndex].data
        this.showMessagesBar = true
      },
      focusPoint(e) {
        const id = e.currentTarget.dataset.id
        const targetMarker = this.currentRoute.polyline[0].points[id]
        this.mapCenter = [targetMarker.latitude, targetMarker.longitude]
        this.scale = 18
      },
      switchMessage() {
        console.log('switch')
        const self = this
        setTimeout(() => {
          self.activeMessage = false
          self.$apply()
        }, 1000)
      },
      navigate(e) {
        const id = e.currentTarget.id
        if (id === 'account' && !this.isAuth) return
        wx.navigateTo({
          url: './' + id
        })
      },
      bindGetUserInfo(e) {
        if (e.detail.userInfo) {
          this.isAuth = true
          wx.setStorage({
            key: 'userInfo',
            data: e.detail.userInfo
          })
          wx.navigateTo({
            url: './account'
          })
        //  储存用户微信数据
          wx.cloud.callFunction({
            name: 'getUserInfo'
          }).then(res => {
            console.log(res)
            if (res.result.data.length) {
              // 已有用户，更新用户信息
              wx.cloud.callFunction({
                name: 'saveUserInfo',
                data: e.detail.userInfo
              }).then(res => { console.log(res) })
            } else {
            //  未授权用户，插入用户信息
              wx.cloud.callFunction({
                name: 'saveUserInfo',
                data: {
                  new: true,
                  ...e.detail.userInfo
                }
              }).then(res => { console.log(res) })
            }
          })
        }
      },
      resetMapAngle() {
        const self = this
        this.mapCenter = this.school.location
        this.mapCtx.getScale({
          success(e) {
            self.scale = e.scake
            self.$apply()
          },
          complete() {
            self.scale = 15
            self.$apply()
          }
        })
        this.mapCtx.getSkew({
          success(e) {
            self.mapSkew = e.skew
            self.$apply()
          },
          complete() {
            self.mapSkew = 0
            self.$apply()
          }
        })
        this.mapCtx.getRotate({
          success(e) {
            self.mapRotate = e.rotate
            self.$apply()
          },
          complete() {
            self.mapRotate = 0
            self.$apply()
          }
        })
      }
    }

    onLoad(options) {
      if (options.mode) this.Ymode = options.mode === 'you'
      this.$parent.loadMarkers().then(res => {
        this.$parent.globalData.markers = res
        const Ymarkers = res.Ymarkers
        const Xmarkers = res.Xmarkers
        this.originMarkers = Ymarkers
        this.markers = this.Ymode ? Ymarkers[0].data : [...Xmarkers[0].data, ...Xmarkers[1].data]
        this.Ymarkers = Ymarkers[0].data
        this.Xmarkers = {
          lost: {
            data: Xmarkers[0].data,
            active: true
          },
          found: {
            data: Xmarkers[1].data,
            active: true
          }
        }
        this.$apply()
        this.loadRoutes()
        this.loadUserInfo()
      })

      this.mapCtx = wx.createMapContext('map')
      this.config = config

      this.loadMessages()
      this.checkAuth()
    }

    includePoints(padding) {
      this.mapCtx.includePoints({
        padding: [padding, padding, padding, padding],
        points: this.markers
      })
    }

    loadRoutes() {
      const routes = require('../mock/routes').routes
      for (const r of routes) {
        for (let point of r.data) {
          if (point.name) {
            for (const i of this.originMarkers) {
              for (const j of i.data) {
                if (j.name === point.name) {
                  point = Object.assign(point, j)
                }
              }
            }
          }
        }
      }
      this.routes = routes
    }

    loadMessages() {
      console.log('load message')
      const self = this
      this.timer = setInterval(() => {
        self.activeMessage = true
        self.message += 'X'
        self.$apply()
      }, 3000)
    }

    checkAuth() {
      const self = this
      wx.getSetting({
        success(res) {
          console.log('授权状态：', res.authSetting)
          self.isAuth = res.authSetting['scope.userInfo']
          self.$apply()
        }
      })
    }

    loadUserInfo() {
      const self = this
      wx.getStorage({
        key: 'userInfo',
        success(res) {
          self.userInfo = res.data
          self.Ymode = !res.data.default_mode
          self.$apply()
        },
        fail(e) {
          if (e.errMsg) {
          //  从数据库加载用户信息
            wx.cloud.callFunction({
              name: 'getUserInfo'
            }).then(res => {
              wx.setStorage({
                key: 'userInfo',
                data: res.result.data[0]
              })
              self.userInfo = res.result.data[0]
              self.Ymode = !res.result.data[0].default_mode
              self.$apply()
            })
          }
        },
        complete() {
          self.markers = self.Ymode ? self.Ymarkers.data : [...self.Xmarkers.lost.data, ...self.Xmarkers.found.data]
          self.$apply()
        }
      })
    }

    onShow() {
      console.log('onshow, set timer')
      if (!this.timer) this.loadMessages()
      this.showMessagesBar = true
    }

    onHide() {
      this.showMessagesBar = false
      clearInterval(this.timer)
      console.log('onhide, clear timer')
    }
  }
</script>
