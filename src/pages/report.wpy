<style lang="less">
  @import "../styles/base";

  #report-map {
    width: 100vw;
    height: 90vh;
    transition: all .3s ease;

    &.small {
      height: 40vh;
      .location {
        /*left:100%;*/
        /*transform:translateX(-100%);*/
        transform:translateX(55vw);
      }
    }

    .mask {
      display: none;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, .5);
      &.show {
        display: block;
      }
    }

    .location {
      position: absolute;
      top: 35vh;
      left: 30%;
      transform: translateX(0);
      background: tomato;
      transition: all .3s ease;
    }
  }

  /* PROGRESS BAR */
  .progress-wrapper {
    height: 10vh;
    text-align: center;
    background-color: @grayBg;
    padding-top: 20rpx;
  }


  .step-wrapper {
    display: flex;
    transition: all .3s ease;
    .step {
      min-width: 100vw;
      height: 90vh;
      overflow-y: hidden;
      &:nth-child(even) {
        background: @grayBg;
      }
      &:nth-child(2) {

      }
    }
  }
  /* CONTROL */
  .control {
    display: flex;
    justify-content: space-between;
    background: @grayBg;
    position:absolute;
    width:100%;
    bottom:12vh;
    padding: 20rpx;
    box-sizing: border-box;
    .desc {
      flex: 1;
      text-align: center;
      background: #fff;
    }
    .next, .prev {
      width: 80rpx;
      height: 80rpx;
      background: #fff;
      font-size: 24px;
      text-align: center;
    }
  }

  .form-wrapper {
    margin: 20rpx;
    border: 1px @grayBg dotted;
    .slider {
      align-items: center;
      van-slider {
        flex: 1;
      }
    }
  }
</style>
<template>
  <view>
    <view class="step-wrapper" style="margin-left: -{{(currentStep-1)*100}}vw">
      <view class="step">
        <map
          class="{{marker.latitude ? 'small' : ''}}"
          id="report-map"
          markers="{{markers}}"
          circles="{{markers}}"
          latitude="{{mapCenter[0]}}"
          longitude="{{mapCenter[1]}}"
          scale="{{scale}}"
        >
          <cover-view class="mask {{showMask ? 'show' : ''}}" @tap="togglePicker"></cover-view>
          <cover-view class="location" @tap="chooseLocation">
            <block wx:if="{{!marker.latitude}}">Âì™Èáå{{type === 'lost' ? '‰∏¢Â§±' : 'Êç°Âà∞'}}ÁöÑÔºü</block>
            <block wx:else>ÈáçÈÄâ</block>
          </cover-view>
        </map>

        <view class="form-wrapper">
          <van-cell title="‰∏¢Â§±ËåÉÂõ¥" custom-class="slider" icon="aim">
            <van-slider
              slot="right-icon"
              value="{{marker.radius}}"
              @drag="changeRange"
            ></van-slider>
          </van-cell>
          <van-cell
            title="‰∏¢Â§±Âå∫Âüü"
            value="{{area[0] + area[1] || 'ËØ∑ÈÄâÊã©‰∏¢Â§±Âå∫Âüü'}}"
            icon="location-o"
            is-link
            arrow-direction="{{currentShowPicker === 'area' ? 'up' : 'down'}}"
            id="area"
            @tap="togglePicker"
          ></van-cell>
        </view>
      </view>
      <view class="step">

        <view class="form-wrapper">
          <van-cell
            title="Áâ©ÂìÅÁ±ªÂûã"
            value="{{itemType[0] + itemType[1] || 'ËØ∑ÈÄâÊã©Áâ©ÂìÅÁ±ªÂûã'}}"
            icon="location-o"
            is-link
            arrow-direction="{{currentShowPicker === 'itemType' ? 'up' : 'down'}}"
            id="itemType"
            @tap="togglePicker"
          ></van-cell>
        </view>
      </view>
    </view>

    <!-- CONTROL -->
    <view class="control" wx:if="{{marker.latitude}}">
      <view class="prev" @tap="prev" wx:if="{{currentStep !== 1}}">üëà</view>
      <view class="desc">ËØ¥ÊòéÊÄßÊñáÂ≠ó</view>
      <view class="next" @tap="next" wx:if="{{currentStep < 4}}">üëâ</view>
    </view>

    <!-- PROGRESS BAR -->
    <view class="progress-wrapper">
      <i-progress percent="{{percent}}" status="active"></i-progress>
    </view>

    <!-- POPUP PICKER -->
    <van-popup
      show="{{ currentShowPicker === 'area' }}"
      @close="togglePicker"
      position="bottom"
    >
      <van-picker columns="{{ areas }}" @change="changeAreaOrItemType" ></van-picker>
    </van-popup>


    <van-popup
      show="{{ currentShowPicker === 'itemType' }}"
      @close="togglePicker"
      position="bottom"
    >
      <van-picker columns="{{ itemTypes }}" @change="changeAreaOrItemType" ></van-picker>
    </van-popup>

    <!-- GLOBAL STUFF -->
    <van-toast id="van-toast" ></van-toast>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import config from '../config'
  import Toast from '../components/vant/toast/toast'

  export default class Report extends wepy.page {
    config = {
      navigationBarTitleText: 'test',
      usingComponents: {
        'i-progress': '../components/iview/progress/index',
        'van-popup': '../components/vant/popup/index',
        'van-field': '../components/vant/field/index',
        'van-cell': '../components/vant/cell/index',
        'van-slider': '../components/vant/slider/index',
        'van-picker': '../components/vant/picker/index',
        'van-toast': '../components/vant/toast/index'
      }
    }

    data = {
      type: '',
      mapCenter: config.school.location,
      scale: 17,
      percent: 0,
      currentStep: 1,
      markers: [{
        iconPath: '/images/icons/markers/view.png',
        width: config.markerStyle.width,
        height: config.markerStyle.height,
        radius: 30,
        ...config.markerStyle.circleStyle
      }],
      currentShowPicker: null,
      showPicker: false,
      area: [],
      areas: [
        {
          values: Object.keys(config.areas)
        },
        {
          values: Object.values(config.areas)[0]
        }
      ],
      itemType: [],
      itemTypes: [
        {
          values: Object.keys(config.itemTypes)
        },
        {
          values: Object.values(config.itemTypes)[0]
        }
      ]
    }

    computed = {
      marker() {
        return this.markers[0]
      },
      showMask () {
        return this.currentShowPicker === 'area' || !this.markers[0].latitude
      }
    }

    methods = {
      chooseLocation() {
        const self = this
        wx.chooseLocation({
          success(res) {
            self.markers[0].latitude = res.latitude
            self.markers[0].longitude = res.longitude
            self.mapCenter = [res.latitude, res.longitude]
            self.scale = 18
            self.percent = 25
            self.$apply()
          }
        })
      },
      changeRange(e) {
        this.markers[0].radius = e.detail.value
      },
      togglePicker(e) {
        this.showPicker = !this.showPicker
        this.currentShowPicker = this.showPicker ? e.target.id : null
        this.setDefaultPickerValue()
      },
      changeAreaOrItemType(e) {
        const son = this.currentShowPicker
        const parent = this.currentShowPicker + 's'
        switch (e.detail.index) {
          case 0:
            const index = e.detail.picker.getIndexes()[0]
            this[parent][1].values = Object.values(config[parent])[index]
            this[son][0] = e.detail.value[0]
            this[son][1] = this[parent][1].values[0]
            break
          case 1:
            this[son][1] = e.detail.value[1]
            break
        }
      },
      next() {
        if (!this.checkForm()) {
          // Warning Here
          Toast.fail('ËØ∑Â°´ÂÜôÂÆåË°®Âçï')
          return
        }
        this.percent += 25
        this.currentStep += 1
      },
      prev() {
        this.percent -= 25
        this.currentStep -= 1
      }
    }

    onLoad(options) {
      this.type = options.type
      const circleColor = config.markerStyle.circleStyle.colors[this.type]
      this.markers[0].color = circleColor
      this.markers[0].fillColor = circleColor + '50' // ÈÄèÊòéÂ∫¶
    }

    checkForm() {
      switch (this.currentStep) {
        case 1:
          return !!this.area.length
      }
    }

    setDefaultPickerValue() {
      if (!this.currentShowPicker) return
      const son = this.currentShowPicker
      const parent = this.currentShowPicker + 's'
      if (!this[son].length) {
        this[son] = [this[parent][0].values[0], this[parent][1].values[0]]
      }
    }
  }
</script>
