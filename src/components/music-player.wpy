<style lang="less">
  @import "../styles/base";

  @keyframes play{
    0%{transform: rotate(0deg);}
    100%{transform: rotate(360deg);}
  }

  .mp-wrapper {
    display: flex;
    justify-content: space-around;
    .timeline {
      display: flex;
      align-items:center;
      width: 80%;
      .time {
        font-size: 9px;
        color: #000;
      }
      slider {
        flex: 1;
      }
    }

    @coverSize: 120rpx;
    .cover-wrapper {
      position: relative;
      .cover {
        width:@coverSize;
        height:@coverSize;
        border-radius:50%;
        animation: play 10s linear infinite;
        &.play{
          animation-play-state: running;
        }
        &.pause {
          animation-play-state: paused;
        }
      }
      .control {
        position:absolute;
        top:@coverSize / 2;
        left:@coverSize / 2;
        transform: translate(-50%, -50%);
        color: @themeColorY;
      }
    }
  }
</style>
<template lang="wxml">
  <view class="mp-wrapper">
    <view class="timeline">
      <view class="start time">{{currentTime}}</view>
      <slider
        value="{{slideValue}}"
        min="0"
        max="{{slideMax}}"
        @change="onChangeSlide"
        step="1"
      ></slider>
      <view class="end time">{{duration}}</view>
    </view>
    <view class="cover-wrapper" @tap="play">
      <image
        class="cover {{playing ? 'play' : 'pause'}}"
        src="{{coverImg}}">
      </image>
      <view class="control">{{playing ? 'Pause' : 'Play'}}</view>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy'
// import {initMusicPlayer} from '../store/actions'
import {formatTime2Duration} from '../utils/formatTime'

export default class MusicPlayer extends wepy.component {

  data = {
    id: null,
    music: {},
    currentTime: 0,
    slideMax: 'max',
    slideValue: 0,
    duration: 0,
    ctx: null,
    playing: false,
    isSameAudio: false
  }

  methods = {
    init(data) {
      this.ctx = data.ctx
      this.music = data.music
      this.ctx.title = data.music.title
      this.ctx.coverImgUrl = data.music.coverImg

    //  static
    //   this.duration = formatTime2Duration(this.music.duration)
    //   this.slideMax = this.music.duration
    },

    updateTime(currentTime) {
      if (this.isSameAudio) {
        this.slideValue = currentTime
        this.currentTime = formatTime2Duration(currentTime)
      }
    },

    play() {
      const ctx = this.ctx
      const music = this.music
      if (this.playing) {
      //  播放中，暂停音乐
        ctx.pause()
        this.playing = false
      } else {
        //  暂停中，播放音乐
        ctx.startTime = ctx.currentTime
        ctx.src = music.src
        ctx.play()
        this.playing = true
      }
    },

    onChangeSlide(e) {
      const value = e.detail.value
      this.audioCtx.seek(value)
    }
  }

  updateAudio() {
    const ctx = this.ctx
  }

  onLoad() {
    // ctx.onTimeUpdate(() => {
    //   this.$invoke('MusicPlayer', 'updateTime', ctx.currentTime)
    // })
    // this.ctx.onPlay(() => {
    //   self.playing = true
    //   self.$apply()
    // })
    // this.ctx.onPause(() => {
    //   self.playing = false
    //   self.$apply()
    // })
    // this.ctx.onStop(() => {
    //   self.playing = false
    //   self.$apply()
    // })
    // this.ctx.onEnded(() => {
    //   self.playing = false
    //   self.$apply()
    // })
  }
}
</script>
