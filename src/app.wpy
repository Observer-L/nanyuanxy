<style lang="less">
</style>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import { loadMarkersX, loadMarkersY, saveMarkers } from './store/actions'
  import config from './config'

  import { setStore } from 'wepy-redux'
  import configStore from './store'

  const store = configStore()
  wepy.$store = store
  setStore(store)

  let mockData = config.DEBUG ? require('./mock') : null

  export default class extends wepy.app {
    config = {
      pages: [
        'pages/index',
        'pages/detail',
        'pages/search',
        'pages/report',
        'pages/web-view'
      ],
      window: {
        backgroundTextStyle: 'light',
        navigationBarBackgroundColor: '#fff',
        navigationBarTitleText: 'WeChat',
        navigationBarTextStyle: 'black'
      },
      permission: {
        'scope.userLocation': {
          desc: '您的位置信息将用于小程序位置接口的效果展示'
        }
      },
      requiredBackgroundModes: ['audio'],
      plugins: {
        // 'ocr-plugin': {
        //   version: '2.0.2',
        //   provider: 'wx4418e3e031e551be'
        // }
      }
    }

    globalData = {
      audioCtx: null
    }

    constructor() {
      super()
      this.use('requestfix')
    }

    async onLaunch() {
      this.globalData.audioCtx = wx.getBackgroundAudioManager()
      console.log('运行环境：', __ENV_PROD__ ? 'pro' : 'dev')
      console.log('运行配置：', config)
      wx.cloud.init({
        env: config.env,
        traceUser: true
      })
    }

    loadMarkers() {
      const self = this
      return new Promise((resolve, reject) => {
        if (config.DEBUG) {
          //  加载本地mock数据
          resolve(this.clearMarkers(mockData))
        } else {
          //  加载云数据库数据
          let Ymarkers = wx.getStorageSync('Ymarkers')
          let Xmarkers
          if (!Ymarkers) {
            console.log('没Y缓存')
            store.dispatch(loadMarkersX())
              .then(res => {
                Xmarkers = res.payload.Xmarkers
                store.dispatch(loadMarkersY())
                  .then(res => {
                    const Ymarkers = res.payload.Ymarkers
                    wx.setStorage({
                      key: 'Ymarkers',
                      data: Ymarkers
                    })
                    resolve(self.clearMarkers({
                      Xmarkers,
                      Ymarkers
                    }))
                  })
              })
          } else {
            console.log('有Y缓存')
            store.dispatch(loadMarkersX())
              .then(res => {
                Xmarkers = res.payload.Xmarkers
                resolve(self.clearMarkers({
                  Xmarkers,
                  Ymarkers
                }))
              })
          }
        }
      })
    }

    clearMarkers(data) {
      //  清洗Marker数据
      return new Promise(resolve => {
        const cleanData = JSON.parse(JSON.stringify(data))
        const markers = [cleanData.Ymarkers, cleanData.Xmarkers]
        let num = 0
        for (const c of markers) {
          for (const i of c) {
            for (const j of i.data) {
              j.id = num
              num += 1
              j.iconPath = `/images/icons/markers/${i.icon}.png`
              j.width = config.markerStyle.width
              j.height = config.markerStyle.height
              j.latitude = j.location[0]
              j.longitude = j.location[1]
              j.callout = Object.assign({ content: j.short_name ? j.short_name : j.name }, config.markerStyle.calloutStyle)
            }
          }
        }
        console.log(cleanData)
        store.dispatch(saveMarkers(cleanData))
        resolve(cleanData)
      })
    }
  }
</script>
